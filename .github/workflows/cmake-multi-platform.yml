# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
variables:
   CONTAINER_TAG: "20250204-mesa-uprev"
   DEBIAN_X86_64_BUILD_BASE_IMAGE: "debian/x86_64_build-base"
   DEBIAN_BASE_TAG: "${CONTAINER_TAG}"

   DEBIAN_X86_64_BUILD_IMAGE_PATH: "debian/x86_64_build"
   DEBIAN_BUILD_TAG: "${CONTAINER_TAG}"

   KERNEL_ROOTFS_TAG: "${CONTAINER_TAG}"
   # default kernel for rootfs before injecting the current kernel tree
   KERNEL_TAG: "v6.13-rc4-mesa-5e77"
   KERNEL_REPO: "gfx-ci/linux"
   PKG_REPO_REV: "bca9635d"

   DEBIAN_X86_64_TEST_BASE_IMAGE: "debian/x86_64_test-base"
   DEBIAN_X86_64_TEST_IMAGE_GL_PATH: "debian/x86_64_test-gl"
   DEBIAN_TEST_GL_TAG: "${CONTAINER_TAG}"

   DEBIAN_PYUTILS_IMAGE: "debian/x86_64_pyutils"
   DEBIAN_PYUTILS_TAG: "${CONTAINER_TAG}"

   ALPINE_X86_64_LAVA_SSH_TAG: "${CONTAINER_TAG}"
.build:
  extends:
    - .container+build-rules
  stage: build-only
  artifacts:
    paths:
      - artifacts
  script:
    - FDO_CI_CONCURRENT=${FDO_CI_CONCURRENT} bash drivers/gpu/drm/ci/build.sh

.build:arm32:
  extends:
    - .build
    - .use-debian/arm64_build
  tags:
    - aarch64
  variables:
    DEFCONFIG: "arch/arm/configs/multi_v7_defconfig"
    KERNEL_IMAGE_NAME: "zImage"
    KERNEL_ARCH: "arm"

.build:arm64:
  extends:
    - .build
    - .use-debian/arm64_build
  tags:
    - aarch64
  variables:
    DEFCONFIG: "arch/arm64/configs/defconfig"
    KERNEL_IMAGE_NAME: "Image"
    KERNEL_ARCH: "arm64"

.build:x86_64:
  extends:
    - .build
    - .use-debian/x86_64_build
  variables:
    DEFCONFIG: "arch/x86/configs/x86_64_defconfig"
    KERNEL_IMAGE_NAME: "bzImage"
    KERNEL_ARCH: "x86_64"


# Build IGT for testing on devices

igt:arm32:
  extends: .build:arm32
  script:
    - FDO_CI_CONCURRENT=${FDO_CI_CONCURRENT} bash drivers/gpu/drm/ci/build-igt.sh

igt:arm64:
  extends: .build:arm64
  script:
    - FDO_CI_CONCURRENT=${FDO_CI_CONCURRENT} bash drivers/gpu/drm/ci/build-igt.sh

igt:x86_64:
  extends: .build:x86_64
  script:
    - FDO_CI_CONCURRENT=${FDO_CI_CONCURRENT} bash drivers/gpu/drm/ci/build-igt.sh

# Build kernels for testing on devices

testing:arm32:
  extends: .build:arm32
  variables:
    # Would be good to have DEBUG_KMEMLEAK, but it doesn't work well with any of
    # PROVE_LOCKING and KASAN as of 5.17.
    #
    # db410c and db820c don't boot with KASAN_INLINE, probably due to the kernel
    # becoming too big for their bootloaders.
    ENABLE_KCONFIGS: "PROVE_LOCKING DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT"
    UPLOAD_TO_MINIO: 1
    MERGE_FRAGMENT: arm.config

testing:arm64:
  extends: .build:arm64
  variables:
    # Would be good to have DEBUG_KMEMLEAK, but it doesn't work well with any of
    # PROVE_LOCKING and KASAN as of 5.17.
    #
    # db410c and db820c don't boot with KASAN_INLINE, probably due to the kernel
    # becoming too big for their bootloaders.
    ENABLE_KCONFIGS: "PROVE_LOCKING DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT"
    UPLOAD_TO_MINIO: 1
    MERGE_FRAGMENT: arm64.config

testing:x86_64:
  extends: .build:x86_64
  variables:
    # Would be good to have DEBUG_KMEMLEAK, but it doesn't work well with any of
    # PROVE_LOCKING and KASAN as of 5.17.
    #
    # db410c and db820c don't boot with KASAN_INLINE, probably due to the kernel
    # becoming too big for their bootloaders.
    ENABLE_KCONFIGS: "PROVE_LOCKING DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT"
    UPLOAD_TO_MINIO: 1
    MERGE_FRAGMENT: x86_64.config


# Jobs for build-testing different configurations

build:arm32:
  extends: .build:arm32

build-nodebugfs:arm64:
  extends: .build:arm64
  variables:
    DISABLE_KCONFIGS: "DEBUG_FS"
    ENABLE_KCONFIGS: "EXPERT DRM_MSM_VALIDATE_XML"

build:x86_64:
  extends: .build:x86_64

# Disable build jobs that we won't use
alpine-build-testing:
  rules:
    - when: never

debian-android:
  rules:
    - when: never

debian-arm32:
  rules:
    - when: never

debian-arm32-asan:
  rules:
    - when: never

debian-arm64:
  rules:
    - when: never

debian-arm64-asan:
  rules:
    - when: never

debian-arm64-build-test:
  rules:
    - when: never

debian-arm64-release:
  rules:
    - when: never

debian-build-testing:
  rules:
    - when: never

debian-clang:
  rules:
    - when: never

debian-clang-release:
  rules:
    - when: never

debian-no-libdrm:
  rules:
    - when: never

debian-ppc64el:
  rules:
    - when: never

debian-release:
  rules:
    - when: never

debian-s390x:
  rules:
    - when: never

debian-testing:
  rules:
    - when: never

debian-testing-asan:
  rules:
    - when: never

debian-testing-msan:
  rules:
    - when: never

debian-vulkan:
  rules:
    - when: never

debian-x86_32:
  rules:
    - when: never

fedora-release:
  rules:
    - when: never

rustfmt:
  rules:
    - when: never

shader-db:
  rules:
    - when: never

windows-msvc:
  rules:
    - when: never

yaml-toml-shell-py-test:
  rules:
    - when: never
check-patch:
  extends:
    - .build
    - .use-debian/x86_64_build
  script:
    - drivers/gpu/drm/ci/check-patch.py
  variables:
    CHECKPATCH_TYPES: "BAD_SIGN_OFF,BAD_STABLE_ADDRESS_STYLE,COMMIT_COMMENT_SYMBOL,COMMIT_MESSAGE,EMAIL_SUBJECT,FROM_SIGN_OFF_MISMATCH,MISSING_SIGN_OFF,NO_AUTHOR_SIGN_OFF,DIFF_IN_COMMIT_MSG,GERRIT_CHANGE_ID,GIT_COMMIT_ID,UNKNOWN_COMMIT_ID,CODE_INDENT,BIT_MACRO,DOS_LINE_ENDINGS"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: on_success
    # Other cases default to never
jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
